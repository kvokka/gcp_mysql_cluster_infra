#!/usr/bin/env bash

set -e
set -o pipefail

LOCK=/tmp/mysql_backup.lock
BUCKET={{ backup_bucket }}
FOLDER={{ xtrabackup_backup_folder }}
TMP_EXTRACT_DIR=/var/lib/mysql/tmp
MASTER_READY_TIMEOUT_IN_SEC=3600

PARALLEL_DOWNLOAD_THREADS=1

start=`date +%s`

exec > >(tee "{{ mysql_backup_logs }}/xtrabackup_backup_restore_$(date '+%Y-%m-%d--%H-%M-%S').log") 2>&1

format_time(){
  date -u -d @"$1" +"%-Hh %-Mm %-Ss"
}

slack_message() {
  end=`date +%s`
  runtime=$(($end-$start))
  local msg="$1"
  local slack_icon=':backup_and_restore:'
  local slack_channel='#tech-notifications'
  local slack_username='MySQL-cluster-backup'
  local title="MySQL Backup restore"
  local suffix
  if [[ "$runtime" -gt 3 ]];then suffix=",\"fields\": [{\"title\":\"Duration\",\"value\":\"$(format_time $runtime)\"}]";fi
  local payload="payload={\"channel\": \"$slack_channel\", \"username\": \"$slack_username\", \"text\": \"\", \"icon_emoji\": \"$slack_icon\", \"attachments\":[{\"title\":\"$title\",\"text\":\"$msg\",\"color\":\"$2\"$suffix}]}"
  local url="https://hooks.slack.com/services/my/awesome/key"
  ans=`curl -X POST --data-urlencode "$payload" $url 2>/dev/null`
}

msg_prefix="*[{{ gcp_environment }}]* *[{{ hostvars[inventory_hostname]['ansible_hostname'] }}]*"

failed_message() {
  slack_message "$msg_prefix service Mysql DB backup restore process failed" "danger"
}

clear_slave_settings() {
  {% if mysql_version == '5.6' or mysql_version == '5.7' %}
  mysql --execute="STOP SLAVE FOR CHANNEL '';RESET SLAVE ALL;"
  {% else %}
  mysql --execute="STOP REPLICA FOR CHANNEL '';RESET REPLICA ALL;"
  {% endif %}
}

function restart_mysql_exporter_after_sync() {
{% if mysql_version == '5.6' or mysql_version == '5.7' %}
while ! mysql --execute="show slave status\G" | grep "Seconds_Behind_Master: 0" &> /dev/null ;do
{% else %}
while ! mysql --execute="show replica status\G" | grep "Seconds_Behind_Source: 0" &> /dev/null ;do
{% endif %}
sleep 5
done

mysql --database={{ database_name }} --execute="FLUSH PRIVILEGES;"
systemctl restart mysql-exporter
}

trap failed_message ERR

if [[ -e $LOCK ]]; then
  echo "Local lock found. Exiting"
  slack_message "Local lock found. Exiting." "danger"
  exit 1
fi

touch $LOCK

{% if ansible_hostname | regex_search('master') %}
gsutil cp $LOCK gs://$BUCKET/$FOLDER.lock
{% else %}
wait_master_ready() {
  echo Waiting until master is ready...
  for ((i=1;i<=MASTER_READY_TIMEOUT_IN_SEC;i++))
  do
    if [[ $(gsutil ls gs://$BUCKET | grep $FOLDER.lock) ]];then
      echo "Waiting $i seconds. Lock found in gs://$BUCKET/$FOLDER.lock."
    else
      local external_lock_released=1
      return
    fi
  done

  if [[ -z $external_lock_released ]];then
    slack_message "$msg_prefix Master DB $FOLDER.lock lock was not released" "danger"
    exit 1
  fi
}

mysql --execute='CREATE DATABASE IF NOT EXISTS {{ database_name }};'
{% endif %}

{% if mysql_version == '8.0' %}
slave_running=$(mysql -e "SHOW GLOBAL STATUS LIKE 'slave_running';" | { grep running || test $? = 1; } | awk '{print $2}')
if [[ "$slave_running" == "OFF" ]]; then
  slack_message "Slave is not running! Aborting backup." "danger"
  exit 1
fi
{% endif %}

slack_message "$msg_prefix service Mysql {{ mysql_version }} xtrabackup DB backup restore $FOLDER" "warning"

if [[ -d $TMP_EXTRACT_DIR ]]; then
  slack_message "$msg_prefix Old xtrabackup DB backup 'tmp' folder found. Removing..." "warning"
  rm -fr $TMP_EXTRACT_DIR
fi

mkdir -p $TMP_EXTRACT_DIR

xbcloud get --storage=google \
  --google-endpoint='storage.googleapis.com' \
  --google-access-key='{{ gcs_access_key }}' \
  --google-secret-key='{{ gcs_secret_key }}' \
  --google-bucket="$BUCKET" \
  $FOLDER | xbstream -xv -C $TMP_EXTRACT_DIR --parallel=$PARALLEL_DOWNLOAD_THREADS

xtrabackup --decompress --remove-original --target-dir=$TMP_EXTRACT_DIR
xtrabackup --prepare --target-dir=$TMP_EXTRACT_DIR --server-id={{ server_id }}

systemctl stop mysql
rm -fr {{ mysql_databases_datadir_path }}
mv $TMP_EXTRACT_DIR {{ mysql_databases_datadir_path }}
chown -R mysql:mysql {{ mysql_databases_datadir_path }}
{% if mysql_version == '5.7' %}
myisamchk -r /var/lib/mysql/data/mysql/user
{% endif %}
systemctl start mysql

clear_slave_settings
mysql_upgrade
service mysql restart

{% if ansible_hostname | regex_search('master') %}
gsutil rm gs://$BUCKET/$FOLDER.lock

if ! echo "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '{{ mysql_exporter_username }}' and host = '{{ mysql_exporter_host }}');" | mysql | grep 0 &> /dev/null; then
mysql --database={{ database_name }} \
      --execute="DROP USER '{{ mysql_exporter_username }}'@'{{ mysql_exporter_host }}';"
fi

mysql --database={{ database_name }} \
      --execute="CREATE USER '{{ mysql_exporter_username }}'@'{{ mysql_exporter_host }}' \
                 IDENTIFIED WITH mysql_native_password BY '{{ mysql_exporter_password }}'; \
                 GRANT {{ mysql_exporter_priv | split(':') | last }} \
                 on {{ mysql_exporter_priv | split(':') | first }} \
                 TO '{{ mysql_exporter_username }}'@'{{ mysql_exporter_host }}' \
                 WITH GRANT OPTION; \
                 FLUSH PRIVILEGES;"

systemctl restart mysql-exporter

{% else %}
wait_master_ready

mysql --database={{ database_name }} \
      --execute="CHANGE MASTER TO MASTER_HOST='{{ master_private_ip }}',\
                MASTER_USER='{{ mysql_replication_username }}',\
                MASTER_PASSWORD='{{ mysql_replication_password }}',\
                MASTER_AUTO_POSITION=1;\
{% if mysql_version == '5.6' or mysql_version == '5.7' %}
                START SLAVE;"
{% else %}
                START REPLICA;"
{% endif %}
restart_mysql_exporter_after_sync & disown
{% endif %}

slack_message "$msg_prefix service Mysql DB backup restore process finished successfully" "good"

rm $LOCK
